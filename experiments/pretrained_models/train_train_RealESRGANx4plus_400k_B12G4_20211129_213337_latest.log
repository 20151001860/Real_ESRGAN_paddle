2021-11-29 21:33:37,118 INFO: 
  name: train_RealESRGANx4plus_400k_B12G4
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 0
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 180
  datasets:[
    train:[
      name: DF2K+OST
      type: RealESRGANDataset
      dataroot_gt: /home/aistudio/data/data118984
      meta_info: /home/aistudio/work/Real-ESRGAN-paddle1129/meta_info_DF2Kmultiscale100.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 8
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      scale: 4
      num_gpu: 1
      manual_seed: 0
      gt_usm: True
      l1_gt_usm: True
      percep_gt_usm: True
      gan_gt_usm: False
      resize_prob: [0.2, 0.7, 0.1]
      resize_range: [0.15, 1.5]
      gaussian_noise_prob: 0.5
      noise_range: [1, 30]
      poisson_scale_range: [0.05, 3]
      gray_noise_prob: 0.4
      jpeg_range: [30, 95]
      second_blur_prob: 0.8
      resize_prob2: [0.3, 0.4, 0.3]
      resize_range2: [0.3, 1.2]
      gaussian_noise_prob2: 0.5
      noise_range2: [1, 25]
      poisson_scale_range2: [0.05, 2.5]
      gray_noise_prob2: 0.4
      jpeg_range2: [30, 95]
      phase: train
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
    scale: 4
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/ESRGAN_SRx4_DF2KOST_official-ff704c30.pdparams
    param_key_g: params_ema
    strict_load_g: True
    resume_state: None
    experiments_root: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4
    models: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/models
    training_states: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/training_states
    log: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4
    visualization: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0.0
      beta1: 0.9
      beta2: 0.99
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0.0
      beta1: 0.9
      beta2: 0.99
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [2000]
      gamma: 0.5
    ]
    total_iter: 2000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      vgg_path: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/Vgg19_features.pdparams
      out_layer_name: ['conv1_2', 'conv2_2', 'conv3_4', 'conv4_4', 'conv5_4']
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 200.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: /home/aistudio/work/Real-ESRGAN-paddle1129

2021-11-29 21:33:37,120 INFO: Training statistics:
	Number of train images: 800
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 100
	Total epochs: 20; iters: 2000.
2021-11-29 21:33:40,397 INFO: Network [RRDBNet] is created.
2021-11-29 21:33:40,403 INFO: RRDBNet(
  (conv_first): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
  )
  (conv_body): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_up1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_up2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_hr): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_last): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (lrelu): LeakyReLU(negative_slope=0.2)
)
2021-11-29 21:33:41,759 INFO: Loading RRDBNet model from /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/ESRGAN_SRx4_DF2KOST_official-ff704c30.pdparams, with param key: [params_ema].
2021-11-29 21:33:41,898 INFO: Use Exponential Moving Average with decay: 0.999
2021-11-29 21:33:42,137 INFO: Network [RRDBNet] is created.
2021-11-29 21:33:42,243 INFO: Loading RRDBNet model from /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/ESRGAN_SRx4_DF2KOST_official-ff704c30.pdparams, with param key: [params_ema].
2021-11-29 21:33:42,394 INFO: Network [UNetDiscriminatorSN] is created.
2021-11-29 21:33:42,396 INFO: UNetDiscriminatorSN(
  (conv0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv1): Conv2D(64, 128, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv2): Conv2D(128, 256, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv3): Conv2D(256, 512, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv4): Conv2D(512, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv5): Conv2D(256, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv6): Conv2D(128, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv7): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv8): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv9): Conv2D(64, 1, kernel_size=[3, 3], padding=1, data_format=NCHW)
)
2021-11-29 21:33:42,400 INFO: Loss [L1Loss] is created.
2021-11-29 21:33:42,622 INFO: Loss [PerceptualLoss] is created.
2021-11-29 21:33:42,623 INFO: Loss [GANLoss] is created.
2021-11-29 21:33:42,629 INFO: Model [RealESRGANModel] is created.
2021-11-29 21:33:42,630 INFO: Start training from epoch: 0, iter: 0
2021-11-29 21:36:25,600 INFO: [train..][epoch:  0, iter:     100, lr:(1.000e-04,)] [eta: 0:47:47, time (data): 1.630 (0.056)] l_g_pix: 7.6925e-02 l_g_percep: 1.5908e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.0602e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.1897e-05 
2021-11-29 21:39:11,375 INFO: [train..][epoch:  1, iter:     200, lr:(1.000e-04,)] [eta: 0:47:28, time (data): 1.644 (0.060)] l_g_pix: 9.5821e-02 l_g_percep: 1.7686e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.0521e-05 l_d_fake: 6.9315e-01 out_d_fake: 9.5101e-06 
2021-11-29 21:39:11,382 INFO: Saving models and training states.
2021-11-29 21:42:13,440 INFO: [train..][epoch:  2, iter:     300, lr:(1.000e-04,)] [eta: 0:47:04, time (data): 1.742 (0.003)] l_g_pix: 9.5428e-02 l_g_percep: 1.6056e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9315e-01 out_d_real: -3.2180e-06 l_d_fake: 6.9314e-01 out_d_fake: -6.8242e-06 
2021-11-29 21:45:11,260 INFO: [train..][epoch:  3, iter:     400, lr:(1.000e-04,)] [eta: 0:45:04, time (data): 1.760 (0.035)] l_g_pix: 1.0065e-01 l_g_percep: 1.7750e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 6.4665e-06 l_d_fake: 6.9315e-01 out_d_fake: 5.3465e-06 
2021-11-29 21:45:11,268 INFO: Saving models and training states.
2021-11-29 21:47:57,125 INFO: [train..][epoch:  4, iter:     500, lr:(1.000e-04,)] [eta: 0:42:05, time (data): 1.549 (0.002)] l_g_pix: 1.1747e-01 l_g_percep: 2.1617e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.1311e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.3288e-05 
2021-11-29 21:50:42,974 INFO: [train..][epoch:  5, iter:     600, lr:(1.000e-04,)] [eta: 0:39:10, time (data): 1.604 (0.028)] l_g_pix: 1.1933e-01 l_g_percep: 1.8212e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7992e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4289e-05 
2021-11-29 21:50:42,981 INFO: Saving models and training states.
2021-11-29 21:53:27,996 INFO: [train..][epoch:  6, iter:     700, lr:(1.000e-04,)] [eta: 0:36:17, time (data): 1.542 (0.002)] l_g_pix: 1.1026e-01 l_g_percep: 1.8335e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.5311e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.4491e-05 
2021-11-29 21:56:17,749 INFO: [train..][epoch:  7, iter:     800, lr:(1.000e-04,)] [eta: 0:33:32, time (data): 1.621 (0.034)] l_g_pix: 1.4416e-01 l_g_percep: 2.6423e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.2689e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.1777e-05 
2021-11-29 21:56:17,755 INFO: Saving models and training states.
2021-11-29 21:59:30,412 INFO: [train..][epoch:  8, iter:     900, lr:(1.000e-04,)] [eta: 0:31:15, time (data): 1.806 (0.002)] l_g_pix: 1.2120e-01 l_g_percep: 1.9361e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.0856e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.0549e-05 
2021-11-29 22:02:13,060 INFO: [train..][epoch:  9, iter:   1,000, lr:(1.000e-04,)] [eta: 0:28:16, time (data): 1.714 (0.036)] l_g_pix: 9.0329e-02 l_g_percep: 1.6403e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9314e-01 out_d_real: 5.8826e-06 l_d_fake: 6.9315e-01 out_d_fake: 4.1514e-07 
2021-11-29 22:02:13,070 INFO: Saving models and training states.
2021-11-29 22:04:59,610 INFO: [train..][epoch: 10, iter:   1,100, lr:(1.000e-04,)] [eta: 0:25:24, time (data): 1.541 (0.002)] l_g_pix: 1.1344e-01 l_g_percep: 1.8886e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9313e-01 out_d_real: 2.5366e-05 l_d_fake: 6.9316e-01 out_d_fake: 1.8763e-05 
2021-11-29 22:07:44,064 INFO: [train..][epoch: 11, iter:   1,200, lr:(1.000e-04,)] [eta: 0:22:31, time (data): 1.594 (0.027)] l_g_pix: 1.0094e-01 l_g_percep: 1.7168e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.3927e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.2330e-05 
2021-11-29 22:07:44,073 INFO: Saving models and training states.
2021-11-29 22:10:29,650 INFO: [train..][epoch: 12, iter:   1,300, lr:(1.000e-04,)] [eta: 0:19:40, time (data): 1.547 (0.002)] l_g_pix: 1.1670e-01 l_g_percep: 1.8905e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.2022e-05 l_d_fake: 6.9315e-01 out_d_fake: 8.2885e-06 
2021-11-29 22:13:50,425 INFO: [train..][epoch: 13, iter:   1,400, lr:(1.000e-04,)] [eta: 0:17:04, time (data): 1.785 (0.036)] l_g_pix: 9.3397e-02 l_g_percep: 1.4768e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9315e-01 out_d_real: 3.6138e-06 l_d_fake: 6.9315e-01 out_d_fake: -2.2672e-06 
2021-11-29 22:13:50,431 INFO: Saving models and training states.
2021-11-29 22:16:35,427 INFO: [train..][epoch: 14, iter:   1,500, lr:(1.000e-04,)] [eta: 0:14:11, time (data): 1.534 (0.002)] l_g_pix: 1.0567e-01 l_g_percep: 2.0685e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9315e-01 out_d_real: -9.4470e-07 l_d_fake: 6.9314e-01 out_d_fake: -6.9076e-06 
2021-11-29 22:19:18,487 INFO: [train..][epoch: 15, iter:   1,600, lr:(1.000e-04,)] [eta: 0:11:19, time (data): 1.584 (0.033)] l_g_pix: 1.2119e-01 l_g_percep: 1.9142e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 8.1671e-06 l_d_fake: 6.9315e-01 out_d_fake: 6.5762e-06 
2021-11-29 22:19:18,494 INFO: Saving models and training states.
2021-11-29 22:22:03,584 INFO: [train..][epoch: 16, iter:   1,700, lr:(1.000e-04,)] [eta: 0:08:28, time (data): 1.532 (0.002)] l_g_pix: 1.1718e-01 l_g_percep: 1.7845e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9314e-01 out_d_real: 6.6787e-06 l_d_fake: 6.9315e-01 out_d_fake: 3.6487e-06 
2021-11-29 22:24:44,292 INFO: [train..][epoch: 17, iter:   1,800, lr:(1.000e-04,)] [eta: 0:05:37, time (data): 1.571 (0.032)] l_g_pix: 9.3989e-02 l_g_percep: 1.6706e+01 l_g_gan: 6.9314e-02 l_d_real: 6.9314e-01 out_d_real: 1.3525e-05 l_d_fake: 6.9315e-01 out_d_fake: 1.1341e-05 
2021-11-29 22:24:44,298 INFO: Saving models and training states.
2021-11-29 22:28:02,481 INFO: [train..][epoch: 18, iter:   1,900, lr:(1.000e-04,)] [eta: 0:02:49, time (data): 1.871 (0.002)] l_g_pix: 9.4574e-02 l_g_percep: 1.5403e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9315e-01 out_d_real: -9.2306e-07 l_d_fake: 6.9315e-01 out_d_fake: -1.3654e-06 
2021-11-29 22:30:49,602 INFO: [train..][epoch: 19, iter:   2,000, lr:(1.000e-04,)] [eta: -1 day, 23:59:59, time (data): 1.766 (0.035)] l_g_pix: 9.9029e-02 l_g_percep: 1.4757e+01 l_g_gan: 6.9315e-02 l_d_real: 6.9315e-01 out_d_real: 1.5353e-06 l_d_fake: 6.9315e-01 out_d_fake: 7.1552e-07 
2021-11-29 22:30:49,609 INFO: Saving models and training states.
2021-11-29 22:30:56,795 INFO: End of training. Time consumed: 0:57:14
2021-11-29 22:30:56,797 INFO: Save the latest model.
