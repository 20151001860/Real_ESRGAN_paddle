2021-12-03 15:08:34,253 INFO: 
  name: train_RealESRGANx4plus_400k_B12G4
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 0
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 180
  datasets:[
    train:[
      name: DF2K+OST
      type: RealESRGANDataset
      dataroot_gt: /home/aistudio/data/data119372
      meta_info: /home/aistudio/work/Real-ESRGAN-paddle1129/meta_info_DF2Kmultiscale.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 8
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      scale: 4
      num_gpu: 1
      manual_seed: 0
      gt_usm: True
      l1_gt_usm: True
      percep_gt_usm: True
      gan_gt_usm: False
      resize_prob: [0.2, 0.7, 0.1]
      resize_range: [0.15, 1.5]
      gaussian_noise_prob: 0.5
      noise_range: [1, 30]
      poisson_scale_range: [0.05, 3]
      gray_noise_prob: 0.4
      jpeg_range: [30, 95]
      second_blur_prob: 0.8
      resize_prob2: [0.3, 0.4, 0.3]
      resize_range2: [0.3, 1.2]
      gaussian_noise_prob2: 0.5
      noise_range2: [1, 25]
      poisson_scale_range2: [0.05, 2.5]
      gray_noise_prob2: 0.4
      jpeg_range2: [30, 95]
      phase: train
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
    scale: 4
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/net_g_latest6.pdparams
    param_key_g: params_ema
    strict_load_g: True
    resume_state: None
    experiments_root: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4
    models: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/models
    training_states: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/training_states
    log: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4
    visualization: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0.0
      beta1: 0.9
      beta2: 0.99
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0.0
      beta1: 0.9
      beta2: 0.99
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [10000]
      gamma: 0.5
    ]
    total_iter: 10000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      vgg_path: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/Vgg19_features.pdparams
      out_layer_name: ['conv1_2', 'conv2_2', 'conv3_4', 'conv4_4', 'conv5_4']
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      reduction: mean
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 1000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: /home/aistudio/work/Real-ESRGAN-paddle1129

2021-12-03 15:08:34,273 INFO: Training statistics:
	Number of train images: 13800
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 1725
	Total epochs: 6; iters: 10000.
2021-12-03 15:08:38,236 INFO: Network [RRDBNet] is created.
2021-12-03 15:08:38,242 INFO: RRDBNet(
  (conv_first): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
  )
  (conv_body): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_up1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_up2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_hr): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_last): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (lrelu): LeakyReLU(negative_slope=0.2)
)
2021-12-03 15:08:38,527 INFO: Loading RRDBNet model from /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/net_g_latest6.pdparams, with param key: [params_ema].
2021-12-03 15:08:38,663 INFO: Use Exponential Moving Average with decay: 0.999
2021-12-03 15:08:38,912 INFO: Network [RRDBNet] is created.
2021-12-03 15:08:39,103 INFO: Loading RRDBNet model from /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/net_g_latest6.pdparams, with param key: [params_ema].
2021-12-03 15:08:39,259 INFO: Network [UNetDiscriminatorSN] is created.
2021-12-03 15:08:39,260 INFO: UNetDiscriminatorSN(
  (conv0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv1): Conv2D(64, 128, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv2): Conv2D(128, 256, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv3): Conv2D(256, 512, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv4): Conv2D(512, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv5): Conv2D(256, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv6): Conv2D(128, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv7): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv8): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv9): Conv2D(64, 1, kernel_size=[3, 3], padding=1, data_format=NCHW)
)
2021-12-03 15:08:39,264 INFO: Loss [L1Loss] is created.
2021-12-03 15:08:39,517 INFO: Loss [PerceptualLoss] is created.
2021-12-03 15:08:39,519 INFO: Loss [GANLoss] is created.
2021-12-03 15:08:39,526 INFO: Model [RealESRGANModel] is created.
2021-12-03 15:08:39,527 INFO: Start training from epoch: 0, iter: 0
2021-12-03 15:10:44,143 INFO: [train..][epoch:  0, iter:     100, lr:(1.000e-04,)] [eta: 3:12:05, time (data): 1.246 (0.041)] l_g_pix: 1.2720e-01 l_g_percep: 2.0835e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.8766e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.5501e-05 
2021-12-03 15:12:42,708 INFO: [train..][epoch:  0, iter:     200, lr:(1.000e-04,)] [eta: 3:11:52, time (data): 1.216 (0.022)] l_g_pix: 1.0324e-01 l_g_percep: 1.4664e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.7533e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0296e-04 
2021-12-03 15:14:41,503 INFO: [train..][epoch:  0, iter:     300, lr:(1.000e-04,)] [eta: 3:10:37, time (data): 1.187 (0.002)] l_g_pix: 1.2404e-01 l_g_percep: 1.7832e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.6994e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.5281e-05 
2021-12-03 15:16:40,925 INFO: [train..][epoch:  0, iter:     400, lr:(1.000e-04,)] [eta: 3:09:15, time (data): 1.191 (0.002)] l_g_pix: 1.1714e-01 l_g_percep: 1.7999e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.3291e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.6520e-05 
2021-12-03 15:18:40,635 INFO: [train..][epoch:  0, iter:     500, lr:(1.000e-04,)] [eta: 3:07:43, time (data): 1.197 (0.002)] l_g_pix: 1.1297e-01 l_g_percep: 1.7460e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.1296e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.5356e-05 
2021-12-03 15:20:39,741 INFO: [train..][epoch:  0, iter:     600, lr:(1.000e-04,)] [eta: 3:05:53, time (data): 1.194 (0.002)] l_g_pix: 8.9088e-02 l_g_percep: 1.4902e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.2811e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8942e-05 
2021-12-03 15:22:38,365 INFO: [train..][epoch:  0, iter:     700, lr:(1.000e-04,)] [eta: 3:03:54, time (data): 1.185 (0.002)] l_g_pix: 1.0804e-01 l_g_percep: 1.8216e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5011e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2477e-05 
2021-12-03 15:24:36,816 INFO: [train..][epoch:  0, iter:     800, lr:(1.000e-04,)] [eta: 3:01:53, time (data): 1.185 (0.002)] l_g_pix: 9.7868e-02 l_g_percep: 1.3473e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.7459e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0142e-04 
2021-12-03 15:26:35,423 INFO: [train..][epoch:  0, iter:     900, lr:(1.000e-04,)] [eta: 2:59:54, time (data): 1.186 (0.002)] l_g_pix: 8.1657e-02 l_g_percep: 1.1336e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.9722e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0288e-04 
2021-12-03 15:28:34,789 INFO: [train..][epoch:  0, iter:   1,000, lr:(1.000e-04,)] [eta: 2:58:02, time (data): 1.190 (0.002)] l_g_pix: 9.4662e-02 l_g_percep: 1.6922e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -9.1071e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.4569e-05 
2021-12-03 15:28:34,797 INFO: Saving models and training states.
2021-12-03 15:30:35,996 INFO: [train..][epoch:  0, iter:   1,100, lr:(1.000e-04,)] [eta: 2:56:23, time (data): 1.194 (0.002)] l_g_pix: 1.0294e-01 l_g_percep: 1.5067e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.0290e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.5783e-05 
2021-12-03 15:32:35,407 INFO: [train..][epoch:  0, iter:   1,200, lr:(1.000e-04,)] [eta: 2:54:28, time (data): 1.194 (0.002)] l_g_pix: 8.7066e-02 l_g_percep: 1.4553e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5205e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.9524e-05 
2021-12-03 15:34:33,639 INFO: [train..][epoch:  0, iter:   1,300, lr:(1.000e-04,)] [eta: 2:52:24, time (data): 1.183 (0.002)] l_g_pix: 1.1608e-01 l_g_percep: 1.5415e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.6113e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0092e-04 
2021-12-03 15:36:31,596 INFO: [train..][epoch:  0, iter:   1,400, lr:(1.000e-04,)] [eta: 2:50:19, time (data): 1.181 (0.002)] l_g_pix: 1.1864e-01 l_g_percep: 1.8098e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.0878e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7175e-05 
2021-12-03 15:38:30,246 INFO: [train..][epoch:  0, iter:   1,500, lr:(1.000e-04,)] [eta: 2:48:19, time (data): 1.188 (0.001)] l_g_pix: 1.1101e-01 l_g_percep: 1.7082e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.9129e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0258e-04 
2021-12-03 15:40:28,682 INFO: [train..][epoch:  0, iter:   1,600, lr:(1.000e-04,)] [eta: 2:46:18, time (data): 1.186 (0.001)] l_g_pix: 9.5765e-02 l_g_percep: 1.3409e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.3324e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8690e-05 
2021-12-03 15:42:27,337 INFO: [train..][epoch:  0, iter:   1,700, lr:(1.000e-04,)] [eta: 2:44:19, time (data): 1.188 (0.002)] l_g_pix: 1.0833e-01 l_g_percep: 1.7531e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1614e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8046e-05 
2021-12-03 15:44:31,592 INFO: [train..][epoch:  1, iter:   1,800, lr:(1.000e-04,)] [eta: 2:42:45, time (data): 1.216 (0.022)] l_g_pix: 1.0509e-01 l_g_percep: 1.7076e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.1025e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.8506e-05 
2021-12-03 15:46:29,793 INFO: [train..][epoch:  1, iter:   1,900, lr:(1.000e-04,)] [eta: 2:40:42, time (data): 1.182 (0.002)] l_g_pix: 1.2294e-01 l_g_percep: 2.0252e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -8.8422e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.6581e-05 
2021-12-03 15:48:29,437 INFO: [train..][epoch:  1, iter:   2,000, lr:(1.000e-04,)] [eta: 2:38:45, time (data): 1.190 (0.002)] l_g_pix: 8.5787e-02 l_g_percep: 1.4849e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.8100e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2973e-05 
2021-12-03 15:48:29,445 INFO: Saving models and training states.
2021-12-03 15:50:30,573 INFO: [train..][epoch:  1, iter:   2,100, lr:(1.000e-04,)] [eta: 2:36:54, time (data): 1.192 (0.002)] l_g_pix: 1.2122e-01 l_g_percep: 1.9361e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.1926e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.7393e-05 
2021-12-03 15:52:30,409 INFO: [train..][epoch:  1, iter:   2,200, lr:(1.000e-04,)] [eta: 2:34:57, time (data): 1.195 (0.002)] l_g_pix: 1.2876e-01 l_g_percep: 1.7527e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0217e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.1100e-04 
2021-12-03 15:54:30,461 INFO: [train..][epoch:  1, iter:   2,300, lr:(1.000e-04,)] [eta: 2:33:00, time (data): 1.201 (0.002)] l_g_pix: 7.4633e-02 l_g_percep: 1.3586e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.6016e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0131e-04 
2021-12-03 15:56:30,008 INFO: [train..][epoch:  1, iter:   2,400, lr:(1.000e-04,)] [eta: 2:31:02, time (data): 1.198 (0.002)] l_g_pix: 1.0827e-01 l_g_percep: 1.6418e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.9624e-05 l_d_fake: 6.9309e-01 out_d_fake: -1.0507e-04 
2021-12-03 15:58:29,885 INFO: [train..][epoch:  1, iter:   2,500, lr:(1.000e-04,)] [eta: 2:29:05, time (data): 1.200 (0.002)] l_g_pix: 1.0779e-01 l_g_percep: 1.5517e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -8.7296e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.5732e-05 
2021-12-03 16:00:29,907 INFO: [train..][epoch:  1, iter:   2,600, lr:(1.000e-04,)] [eta: 2:27:08, time (data): 1.200 (0.002)] l_g_pix: 7.6854e-02 l_g_percep: 1.4098e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0649e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.1040e-04 
2021-12-03 16:02:29,436 INFO: [train..][epoch:  1, iter:   2,700, lr:(1.000e-04,)] [eta: 2:25:09, time (data): 1.196 (0.002)] l_g_pix: 6.9322e-02 l_g_percep: 1.1402e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5959e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2367e-05 
2021-12-03 16:04:28,818 INFO: [train..][epoch:  1, iter:   2,800, lr:(1.000e-04,)] [eta: 2:23:10, time (data): 1.195 (0.002)] l_g_pix: 1.0976e-01 l_g_percep: 1.5609e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.6150e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0204e-04 
2021-12-03 16:06:28,227 INFO: [train..][epoch:  1, iter:   2,900, lr:(1.000e-04,)] [eta: 2:21:11, time (data): 1.200 (0.002)] l_g_pix: 1.1017e-01 l_g_percep: 1.5438e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.0131e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8341e-05 
2021-12-03 16:08:25,221 INFO: [train..][epoch:  1, iter:   3,000, lr:(1.000e-04,)] [eta: 2:19:06, time (data): 1.184 (0.002)] l_g_pix: 1.1615e-01 l_g_percep: 1.7982e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5492e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2180e-05 
2021-12-03 16:08:25,227 INFO: Saving models and training states.
2021-12-03 16:10:24,965 INFO: [train..][epoch:  1, iter:   3,100, lr:(1.000e-04,)] [eta: 2:17:08, time (data): 1.185 (0.002)] l_g_pix: 9.0304e-02 l_g_percep: 1.5285e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1453e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7957e-05 
2021-12-03 16:12:28,709 INFO: [train..][epoch:  1, iter:   3,200, lr:(1.000e-04,)] [eta: 2:15:18, time (data): 1.213 (0.002)] l_g_pix: 9.1081e-02 l_g_percep: 1.5203e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0135e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0648e-04 
2021-12-03 16:14:26,011 INFO: [train..][epoch:  1, iter:   3,300, lr:(1.000e-04,)] [eta: 2:13:14, time (data): 1.167 (0.001)] l_g_pix: 7.1615e-02 l_g_percep: 1.3514e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1859e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7705e-05 
2021-12-03 16:16:23,019 INFO: [train..][epoch:  1, iter:   3,400, lr:(1.000e-04,)] [eta: 2:11:10, time (data): 1.169 (0.001)] l_g_pix: 1.0841e-01 l_g_percep: 1.4576e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.9385e-05 l_d_fake: 6.9309e-01 out_d_fake: -1.0569e-04 
2021-12-03 16:18:27,844 INFO: [train..][epoch:  2, iter:   3,500, lr:(1.000e-04,)] [eta: 2:09:21, time (data): 1.267 (0.046)] l_g_pix: 7.0382e-02 l_g_percep: 1.3900e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1281e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7941e-05 
2021-12-03 16:20:30,932 INFO: [train..][epoch:  2, iter:   3,600, lr:(1.000e-04,)] [eta: 2:07:28, time (data): 1.247 (0.022)] l_g_pix: 9.2521e-02 l_g_percep: 1.4724e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.6736e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0242e-04 
2021-12-03 16:22:26,702 INFO: [train..][epoch:  2, iter:   3,700, lr:(1.000e-04,)] [eta: 2:05:22, time (data): 1.159 (0.001)] l_g_pix: 1.0468e-01 l_g_percep: 2.0776e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0706e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.1031e-04 
2021-12-03 16:24:22,396 INFO: [train..][epoch:  2, iter:   3,800, lr:(1.000e-04,)] [eta: 2:03:17, time (data): 1.158 (0.001)] l_g_pix: 1.1263e-01 l_g_percep: 1.4520e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -8.8342e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7570e-05 
2021-12-03 16:26:18,948 INFO: [train..][epoch:  2, iter:   3,900, lr:(1.000e-04,)] [eta: 2:01:13, time (data): 1.167 (0.001)] l_g_pix: 9.8489e-02 l_g_percep: 1.4945e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0106e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0510e-04 
2021-12-03 16:28:15,428 INFO: [train..][epoch:  2, iter:   4,000, lr:(1.000e-04,)] [eta: 1:59:10, time (data): 1.166 (0.001)] l_g_pix: 9.2094e-02 l_g_percep: 1.5256e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.6617e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.1260e-05 
2021-12-03 16:28:15,435 INFO: Saving models and training states.
2021-12-03 16:30:13,280 INFO: [train..][epoch:  2, iter:   4,100, lr:(1.000e-04,)] [eta: 1:57:09, time (data): 1.165 (0.001)] l_g_pix: 1.1067e-01 l_g_percep: 1.7963e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.6235e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.4995e-05 
2021-12-03 16:32:09,072 INFO: [train..][epoch:  2, iter:   4,200, lr:(1.000e-04,)] [eta: 1:55:05, time (data): 1.161 (0.001)] l_g_pix: 1.2229e-01 l_g_percep: 1.5005e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.3541e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0024e-04 
2021-12-03 16:34:05,079 INFO: [train..][epoch:  2, iter:   4,300, lr:(1.000e-04,)] [eta: 1:53:02, time (data): 1.159 (0.001)] l_g_pix: 1.1147e-01 l_g_percep: 1.5846e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5790e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.1484e-05 
2021-12-03 16:36:00,586 INFO: [train..][epoch:  2, iter:   4,400, lr:(1.000e-04,)] [eta: 1:50:58, time (data): 1.157 (0.001)] l_g_pix: 9.8288e-02 l_g_percep: 1.5599e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.4833e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0084e-04 
2021-12-03 16:37:56,348 INFO: [train..][epoch:  2, iter:   4,500, lr:(1.000e-04,)] [eta: 1:48:55, time (data): 1.155 (0.001)] l_g_pix: 1.2151e-01 l_g_percep: 1.3865e+01 l_g_gan: 6.9328e-02 l_d_real: 6.9320e-01 out_d_real: -1.0601e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.1085e-04 
2021-12-03 16:39:52,370 INFO: [train..][epoch:  2, iter:   4,600, lr:(1.000e-04,)] [eta: 1:46:53, time (data): 1.158 (0.001)] l_g_pix: 1.0425e-01 l_g_percep: 1.4231e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.2404e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.6688e-05 
2021-12-03 16:41:48,875 INFO: [train..][epoch:  2, iter:   4,700, lr:(1.000e-04,)] [eta: 1:44:52, time (data): 1.165 (0.001)] l_g_pix: 8.6370e-02 l_g_percep: 1.3768e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.7497e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2157e-05 
2021-12-03 16:43:45,896 INFO: [train..][epoch:  2, iter:   4,800, lr:(1.000e-04,)] [eta: 1:42:51, time (data): 1.168 (0.001)] l_g_pix: 1.0825e-01 l_g_percep: 1.6659e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.5708e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0103e-04 
2021-12-03 16:45:42,990 INFO: [train..][epoch:  2, iter:   4,900, lr:(1.000e-04,)] [eta: 1:40:51, time (data): 1.168 (0.001)] l_g_pix: 1.0874e-01 l_g_percep: 1.5883e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.6535e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0127e-04 
2021-12-03 16:47:39,194 INFO: [train..][epoch:  2, iter:   5,000, lr:(1.000e-04,)] [eta: 1:38:50, time (data): 1.165 (0.001)] l_g_pix: 8.8073e-02 l_g_percep: 1.4808e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5685e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.1184e-05 
2021-12-03 16:47:39,199 INFO: Saving models and training states.
2021-12-03 16:49:36,242 INFO: [train..][epoch:  2, iter:   5,100, lr:(1.000e-04,)] [eta: 1:36:50, time (data): 1.156 (0.002)] l_g_pix: 1.0531e-01 l_g_percep: 1.6479e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9318e-01 out_d_real: -6.8577e-05 l_d_fake: 6.9311e-01 out_d_fake: -7.6897e-05 
2021-12-03 16:51:36,023 INFO: [train..][epoch:  3, iter:   5,200, lr:(1.000e-04,)] [eta: 1:34:52, time (data): 1.180 (0.020)] l_g_pix: 8.5897e-02 l_g_percep: 1.3942e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.5167e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0015e-04 
2021-12-03 16:53:32,207 INFO: [train..][epoch:  3, iter:   5,300, lr:(1.000e-04,)] [eta: 1:32:51, time (data): 1.162 (0.001)] l_g_pix: 9.6050e-02 l_g_percep: 1.6108e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1427e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8478e-05 
2021-12-03 16:55:27,756 INFO: [train..][epoch:  3, iter:   5,400, lr:(1.000e-04,)] [eta: 1:30:50, time (data): 1.158 (0.001)] l_g_pix: 1.1585e-01 l_g_percep: 1.5780e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.9168e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.4799e-05 
2021-12-03 16:57:22,772 INFO: [train..][epoch:  3, iter:   5,500, lr:(1.000e-04,)] [eta: 1:28:49, time (data): 1.148 (0.001)] l_g_pix: 9.4343e-02 l_g_percep: 1.7503e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9318e-01 out_d_real: -7.1751e-05 l_d_fake: 6.9311e-01 out_d_fake: -7.9006e-05 
2021-12-03 16:59:17,979 INFO: [train..][epoch:  3, iter:   5,600, lr:(1.000e-04,)] [eta: 1:26:48, time (data): 1.150 (0.001)] l_g_pix: 1.0865e-01 l_g_percep: 1.6449e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0295e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0901e-04 
2021-12-03 17:01:13,302 INFO: [train..][epoch:  3, iter:   5,700, lr:(1.000e-04,)] [eta: 1:24:47, time (data): 1.147 (0.001)] l_g_pix: 1.1443e-01 l_g_percep: 1.6061e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0781e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.1179e-04 
2021-12-03 17:03:08,940 INFO: [train..][epoch:  3, iter:   5,800, lr:(1.000e-04,)] [eta: 1:22:47, time (data): 1.152 (0.001)] l_g_pix: 1.0975e-01 l_g_percep: 1.7277e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.0104e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.8571e-05 
2021-12-03 17:05:04,286 INFO: [train..][epoch:  3, iter:   5,900, lr:(1.000e-04,)] [eta: 1:20:46, time (data): 1.155 (0.001)] l_g_pix: 1.0075e-01 l_g_percep: 1.7393e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -9.0527e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.4651e-05 
2021-12-03 17:07:00,367 INFO: [train..][epoch:  3, iter:   6,000, lr:(1.000e-04,)] [eta: 1:18:47, time (data): 1.158 (0.001)] l_g_pix: 8.7960e-02 l_g_percep: 1.4118e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.2943e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.9762e-05 
2021-12-03 17:07:00,372 INFO: Saving models and training states.
2021-12-03 17:08:58,432 INFO: [train..][epoch:  3, iter:   6,100, lr:(1.000e-04,)] [eta: 1:16:48, time (data): 1.160 (0.001)] l_g_pix: 1.2147e-01 l_g_percep: 1.8869e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.8051e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.3062e-05 
2021-12-03 17:10:54,152 INFO: [train..][epoch:  3, iter:   6,200, lr:(1.000e-04,)] [eta: 1:14:49, time (data): 1.158 (0.001)] l_g_pix: 9.7984e-02 l_g_percep: 1.5365e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.3316e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8576e-05 
2021-12-03 17:12:50,142 INFO: [train..][epoch:  3, iter:   6,300, lr:(1.000e-04,)] [eta: 1:12:49, time (data): 1.161 (0.001)] l_g_pix: 7.9000e-02 l_g_percep: 1.3810e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -7.6893e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.4776e-05 
2021-12-03 17:14:45,926 INFO: [train..][epoch:  3, iter:   6,400, lr:(1.000e-04,)] [eta: 1:10:50, time (data): 1.159 (0.001)] l_g_pix: 1.0757e-01 l_g_percep: 1.7713e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.2595e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7938e-05 
2021-12-03 17:16:41,908 INFO: [train..][epoch:  3, iter:   6,500, lr:(1.000e-04,)] [eta: 1:08:51, time (data): 1.160 (0.001)] l_g_pix: 8.3457e-02 l_g_percep: 1.4033e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.7041e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.9977e-05 
2021-12-03 17:18:38,234 INFO: [train..][epoch:  3, iter:   6,600, lr:(1.000e-04,)] [eta: 1:06:52, time (data): 1.162 (0.001)] l_g_pix: 1.2072e-01 l_g_percep: 1.7186e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.6075e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.0614e-05 
2021-12-03 17:20:34,291 INFO: [train..][epoch:  3, iter:   6,700, lr:(1.000e-04,)] [eta: 1:04:53, time (data): 1.162 (0.001)] l_g_pix: 1.1685e-01 l_g_percep: 1.9519e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.5710e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0139e-04 
2021-12-03 17:22:30,902 INFO: [train..][epoch:  3, iter:   6,800, lr:(1.000e-04,)] [eta: 1:02:54, time (data): 1.164 (0.001)] l_g_pix: 1.0696e-01 l_g_percep: 1.5678e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.0072e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7916e-05 
2021-12-03 17:24:27,607 INFO: [train..][epoch:  3, iter:   6,900, lr:(1.000e-04,)] [eta: 1:00:55, time (data): 1.169 (0.001)] l_g_pix: 1.0821e-01 l_g_percep: 1.6233e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.0138e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.5869e-05 
2021-12-03 17:26:28,574 INFO: [train..][epoch:  4, iter:   7,000, lr:(1.000e-04,)] [eta: 0:58:59, time (data): 1.193 (0.020)] l_g_pix: 9.7456e-02 l_g_percep: 1.6170e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0175e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0805e-04 
2021-12-03 17:26:28,579 INFO: Saving models and training states.
2021-12-03 17:28:26,772 INFO: [train..][epoch:  4, iter:   7,100, lr:(1.000e-04,)] [eta: 0:57:01, time (data): 1.169 (0.001)] l_g_pix: 9.1922e-02 l_g_percep: 1.4188e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.0511e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.9523e-05 
2021-12-03 17:30:24,532 INFO: [train..][epoch:  4, iter:   7,200, lr:(1.000e-04,)] [eta: 0:55:03, time (data): 1.174 (0.001)] l_g_pix: 9.6022e-02 l_g_percep: 1.7440e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1863e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.6354e-05 
2021-12-03 17:32:21,348 INFO: [train..][epoch:  4, iter:   7,300, lr:(1.000e-04,)] [eta: 0:53:04, time (data): 1.168 (0.001)] l_g_pix: 1.3829e-01 l_g_percep: 1.7772e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.2674e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8346e-05 
2021-12-03 17:34:17,715 INFO: [train..][epoch:  4, iter:   7,400, lr:(1.000e-04,)] [eta: 0:51:06, time (data): 1.165 (0.001)] l_g_pix: 9.5480e-02 l_g_percep: 1.7335e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.3703e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8148e-05 
2021-12-03 17:36:14,018 INFO: [train..][epoch:  4, iter:   7,500, lr:(1.000e-04,)] [eta: 0:49:07, time (data): 1.161 (0.001)] l_g_pix: 8.1908e-02 l_g_percep: 1.4440e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.4819e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.8092e-05 
2021-12-03 17:38:09,610 INFO: [train..][epoch:  4, iter:   7,600, lr:(1.000e-04,)] [eta: 0:47:08, time (data): 1.158 (0.001)] l_g_pix: 9.0026e-02 l_g_percep: 1.5689e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.1248e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.8782e-05 
2021-12-03 17:40:05,837 INFO: [train..][epoch:  4, iter:   7,700, lr:(1.000e-04,)] [eta: 0:45:10, time (data): 1.166 (0.001)] l_g_pix: 8.4175e-02 l_g_percep: 1.4939e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0163e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0636e-04 
2021-12-03 17:42:02,249 INFO: [train..][epoch:  4, iter:   7,800, lr:(1.000e-04,)] [eta: 0:43:12, time (data): 1.165 (0.001)] l_g_pix: 9.3319e-02 l_g_percep: 1.4874e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.6177e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2111e-05 
2021-12-03 17:43:58,144 INFO: [train..][epoch:  4, iter:   7,900, lr:(1.000e-04,)] [eta: 0:41:13, time (data): 1.160 (0.001)] l_g_pix: 1.3019e-01 l_g_percep: 1.6111e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.3237e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.1242e-05 
2021-12-03 17:45:54,233 INFO: [train..][epoch:  4, iter:   8,000, lr:(1.000e-04,)] [eta: 0:39:15, time (data): 1.161 (0.001)] l_g_pix: 1.2289e-01 l_g_percep: 1.5170e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.7620e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0103e-04 
2021-12-03 17:45:54,237 INFO: Saving models and training states.
2021-12-03 17:47:51,379 INFO: [train..][epoch:  4, iter:   8,100, lr:(1.000e-04,)] [eta: 0:37:17, time (data): 1.153 (0.001)] l_g_pix: 1.0185e-01 l_g_percep: 1.4761e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -9.8880e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0420e-04 
2021-12-03 17:49:47,848 INFO: [train..][epoch:  4, iter:   8,200, lr:(1.000e-04,)] [eta: 0:35:19, time (data): 1.160 (0.001)] l_g_pix: 8.4032e-02 l_g_percep: 1.3798e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.4800e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.8911e-05 
2021-12-03 17:51:44,061 INFO: [train..][epoch:  4, iter:   8,300, lr:(1.000e-04,)] [eta: 0:33:21, time (data): 1.159 (0.001)] l_g_pix: 1.1062e-01 l_g_percep: 1.6736e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0450e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0748e-04 
2021-12-03 17:53:39,129 INFO: [train..][epoch:  4, iter:   8,400, lr:(1.000e-04,)] [eta: 0:31:22, time (data): 1.154 (0.001)] l_g_pix: 1.1312e-01 l_g_percep: 1.7904e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -8.9177e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.6638e-05 
2021-12-03 17:55:34,592 INFO: [train..][epoch:  4, iter:   8,500, lr:(1.000e-04,)] [eta: 0:29:24, time (data): 1.156 (0.002)] l_g_pix: 1.0816e-01 l_g_percep: 1.7163e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.3999e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2281e-05 
2021-12-03 17:57:30,304 INFO: [train..][epoch:  4, iter:   8,600, lr:(1.000e-04,)] [eta: 0:27:26, time (data): 1.157 (0.002)] l_g_pix: 1.2078e-01 l_g_percep: 1.7341e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.4214e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0293e-04 
2021-12-03 17:59:30,305 INFO: [train..][epoch:  5, iter:   8,700, lr:(1.000e-04,)] [eta: 0:25:29, time (data): 1.154 (0.001)] l_g_pix: 1.0166e-01 l_g_percep: 1.5526e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0689e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.1386e-04 
2021-12-03 18:01:26,386 INFO: [train..][epoch:  5, iter:   8,800, lr:(1.000e-04,)] [eta: 0:23:31, time (data): 1.158 (0.001)] l_g_pix: 1.2803e-01 l_g_percep: 1.7573e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0093e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0446e-04 
2021-12-03 18:03:22,470 INFO: [train..][epoch:  5, iter:   8,900, lr:(1.000e-04,)] [eta: 0:21:33, time (data): 1.157 (0.001)] l_g_pix: 1.1025e-01 l_g_percep: 1.4829e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0444e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0802e-04 
2021-12-03 18:05:18,957 INFO: [train..][epoch:  5, iter:   9,000, lr:(1.000e-04,)] [eta: 0:19:35, time (data): 1.162 (0.001)] l_g_pix: 1.0976e-01 l_g_percep: 1.5365e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0054e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0562e-04 
2021-12-03 18:05:18,961 INFO: Saving models and training states.
2021-12-03 18:07:16,596 INFO: [train..][epoch:  5, iter:   9,100, lr:(1.000e-04,)] [eta: 0:17:37, time (data): 1.159 (0.001)] l_g_pix: 8.9288e-02 l_g_percep: 1.6770e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9320e-01 out_d_real: -1.0230e-04 l_d_fake: 6.9309e-01 out_d_fake: -1.0754e-04 
2021-12-03 18:09:12,442 INFO: [train..][epoch:  5, iter:   9,200, lr:(1.000e-04,)] [eta: 0:15:40, time (data): 1.158 (0.001)] l_g_pix: 1.0991e-01 l_g_percep: 1.7593e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.5044e-05 l_d_fake: 6.9310e-01 out_d_fake: -1.0276e-04 
2021-12-03 18:11:08,395 INFO: [train..][epoch:  5, iter:   9,300, lr:(1.000e-04,)] [eta: 0:13:42, time (data): 1.163 (0.001)] l_g_pix: 9.7406e-02 l_g_percep: 1.6309e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -7.8568e-05 l_d_fake: 6.9310e-01 out_d_fake: -8.6815e-05 
2021-12-03 18:13:05,052 INFO: [train..][epoch:  5, iter:   9,400, lr:(1.000e-04,)] [eta: 0:11:44, time (data): 1.165 (0.001)] l_g_pix: 1.1447e-01 l_g_percep: 1.7893e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -9.1392e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.7734e-05 
2021-12-03 18:15:01,467 INFO: [train..][epoch:  5, iter:   9,500, lr:(1.000e-04,)] [eta: 0:09:46, time (data): 1.164 (0.001)] l_g_pix: 1.1393e-01 l_g_percep: 1.5726e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.3572e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.0521e-05 
2021-12-03 18:16:57,494 INFO: [train..][epoch:  5, iter:   9,600, lr:(1.000e-04,)] [eta: 0:07:49, time (data): 1.162 (0.001)] l_g_pix: 9.9469e-02 l_g_percep: 1.7187e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9318e-01 out_d_real: -6.7021e-05 l_d_fake: 6.9311e-01 out_d_fake: -7.5977e-05 
2021-12-03 18:18:53,791 INFO: [train..][epoch:  5, iter:   9,700, lr:(1.000e-04,)] [eta: 0:05:51, time (data): 1.163 (0.001)] l_g_pix: 1.2041e-01 l_g_percep: 1.9073e+01 l_g_gan: 6.9320e-02 l_d_real: 6.9319e-01 out_d_real: -8.8726e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.6908e-05 
2021-12-03 18:20:49,523 INFO: [train..][epoch:  5, iter:   9,800, lr:(1.000e-04,)] [eta: 0:03:53, time (data): 1.159 (0.001)] l_g_pix: 1.1289e-01 l_g_percep: 1.8582e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.6456e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.4744e-05 
2021-12-03 18:22:44,881 INFO: [train..][epoch:  5, iter:   9,900, lr:(1.000e-04,)] [eta: 0:01:56, time (data): 1.155 (0.002)] l_g_pix: 1.1045e-01 l_g_percep: 2.0222e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.7125e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.2470e-05 
2021-12-03 18:24:39,143 INFO: [train..][epoch:  5, iter:  10,000, lr:(1.000e-04,)] [eta: -1 day, 23:59:59, time (data): 1.147 (0.002)] l_g_pix: 1.0225e-01 l_g_percep: 1.7064e+01 l_g_gan: 6.9319e-02 l_d_real: 6.9319e-01 out_d_real: -8.5260e-05 l_d_fake: 6.9310e-01 out_d_fake: -9.5265e-05 
2021-12-03 18:24:39,148 INFO: Saving models and training states.
2021-12-03 18:24:44,503 INFO: End of training. Time consumed: 3:16:04
2021-12-03 18:24:44,505 INFO: Save the latest model.
