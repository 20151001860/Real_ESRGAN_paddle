2021-12-02 18:42:17,963 INFO: 
  name: train_RealESRGANx4plus_400k_B12G4
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 0
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 180
  datasets:[
    train:[
      name: DF2K+OST
      type: RealESRGANDataset
      dataroot_gt: /home/aistudio/data/data119372
      meta_info: /home/aistudio/work/Real-ESRGAN-paddle1129/meta_info_DF2Kmultiscale.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 8
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      scale: 4
      num_gpu: 1
      manual_seed: 0
      gt_usm: True
      l1_gt_usm: True
      percep_gt_usm: True
      gan_gt_usm: False
      resize_prob: [0.2, 0.7, 0.1]
      resize_range: [0.15, 1.5]
      gaussian_noise_prob: 0.5
      noise_range: [1, 30]
      poisson_scale_range: [0.05, 3]
      gray_noise_prob: 0.4
      jpeg_range: [30, 95]
      second_blur_prob: 0.8
      resize_prob2: [0.3, 0.4, 0.3]
      resize_range2: [0.3, 1.2]
      gaussian_noise_prob2: 0.5
      noise_range2: [1, 25]
      poisson_scale_range2: [0.05, 2.5]
      gray_noise_prob2: 0.4
      jpeg_range2: [30, 95]
      phase: train
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
    scale: 4
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/net_g_latest4.pdparams
    param_key_g: params_ema
    strict_load_g: True
    resume_state: None
    experiments_root: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4
    models: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/models
    training_states: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/training_states
    log: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4
    visualization: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/train_RealESRGANx4plus_400k_B12G4/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0.0
      beta1: 0.9
      beta2: 0.99
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0.0
      beta1: 0.9
      beta2: 0.99
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [20000]
      gamma: 0.5
    ]
    total_iter: 20000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      vgg_path: /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/Vgg19_features.pdparams
      out_layer_name: ['conv1_2', 'conv2_2', 'conv3_4', 'conv4_4', 'conv5_4']
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      reduction: mean
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 1000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: /home/aistudio/work/Real-ESRGAN-paddle1129

2021-12-02 18:42:17,982 INFO: Training statistics:
	Number of train images: 13800
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 1725
	Total epochs: 12; iters: 20000.
2021-12-02 18:42:20,740 INFO: Network [RRDBNet] is created.
2021-12-02 18:42:20,746 INFO: RRDBNet(
  (conv_first): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2D(64, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv2): Conv2D(96, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv3): Conv2D(128, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv4): Conv2D(160, 32, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (conv5): Conv2D(192, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
        (lrelu): LeakyReLU(negative_slope=0.2)
      )
    )
  )
  (conv_body): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_up1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_up2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_hr): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv_last): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (lrelu): LeakyReLU(negative_slope=0.2)
)
2021-12-02 18:42:20,992 INFO: Loading RRDBNet model from /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/net_g_latest4.pdparams, with param key: [params_ema].
2021-12-02 18:42:21,121 INFO: Use Exponential Moving Average with decay: 0.999
2021-12-02 18:42:21,351 INFO: Network [RRDBNet] is created.
2021-12-02 18:42:21,533 INFO: Loading RRDBNet model from /home/aistudio/work/Real-ESRGAN-paddle1129/experiments/pretrained_models/net_g_latest4.pdparams, with param key: [params_ema].
2021-12-02 18:42:21,674 INFO: Network [UNetDiscriminatorSN] is created.
2021-12-02 18:42:21,675 INFO: UNetDiscriminatorSN(
  (conv0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv1): Conv2D(64, 128, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv2): Conv2D(128, 256, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv3): Conv2D(256, 512, kernel_size=[4, 4], stride=[2, 2], padding=1, data_format=NCHW)
  (conv4): Conv2D(512, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv5): Conv2D(256, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv6): Conv2D(128, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv7): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv8): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (conv9): Conv2D(64, 1, kernel_size=[3, 3], padding=1, data_format=NCHW)
)
2021-12-02 18:42:21,679 INFO: Loss [L1Loss] is created.
2021-12-02 18:42:21,879 INFO: Loss [PerceptualLoss] is created.
2021-12-02 18:42:21,881 INFO: Loss [GANLoss] is created.
2021-12-02 18:42:21,886 INFO: Model [RealESRGANModel] is created.
2021-12-02 18:42:21,887 INFO: Start training from epoch: 0, iter: 0
2021-12-02 18:44:21,751 INFO: [train..][epoch:  0, iter:     100, lr:(1.000e-04,)] [eta: 6:12:42, time (data): 1.199 (0.038)] l_g_pix: 1.2744e-01 l_g_percep: 2.0867e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2063e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1888e-05 
2021-12-02 18:46:18,326 INFO: [train..][epoch:  0, iter:     200, lr:(1.000e-04,)] [eta: 6:17:43, time (data): 1.182 (0.020)] l_g_pix: 1.0460e-01 l_g_percep: 1.4816e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8511e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7060e-05 
2021-12-02 18:48:15,097 INFO: [train..][epoch:  0, iter:     300, lr:(1.000e-04,)] [eta: 6:18:19, time (data): 1.168 (0.002)] l_g_pix: 1.2257e-01 l_g_percep: 1.7982e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2377e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3815e-05 
2021-12-02 18:50:09,829 INFO: [train..][epoch:  0, iter:     400, lr:(1.000e-04,)] [eta: 6:16:00, time (data): 1.157 (0.002)] l_g_pix: 1.1863e-01 l_g_percep: 1.8105e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8917e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6288e-05 
2021-12-02 18:52:04,360 INFO: [train..][epoch:  0, iter:     500, lr:(1.000e-04,)] [eta: 6:13:42, time (data): 1.145 (0.001)] l_g_pix: 1.1370e-01 l_g_percep: 1.7613e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6915e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7320e-05 
2021-12-02 18:53:58,682 INFO: [train..][epoch:  0, iter:     600, lr:(1.000e-04,)] [eta: 6:11:25, time (data): 1.144 (0.002)] l_g_pix: 8.9850e-02 l_g_percep: 1.5021e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.5399e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.1923e-05 
2021-12-02 18:55:55,563 INFO: [train..][epoch:  0, iter:     700, lr:(1.000e-04,)] [eta: 6:10:25, time (data): 1.170 (0.002)] l_g_pix: 1.0920e-01 l_g_percep: 1.8352e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.1648e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4183e-05 
2021-12-02 18:57:52,405 INFO: [train..][epoch:  0, iter:     800, lr:(1.000e-04,)] [eta: 6:09:10, time (data): 1.169 (0.002)] l_g_pix: 9.8705e-02 l_g_percep: 1.3623e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0549e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4469e-05 
2021-12-02 18:59:47,341 INFO: [train..][epoch:  0, iter:     900, lr:(1.000e-04,)] [eta: 6:07:06, time (data): 1.149 (0.002)] l_g_pix: 8.2766e-02 l_g_percep: 1.1462e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8223e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5847e-05 
2021-12-02 19:01:42,462 INFO: [train..][epoch:  0, iter:   1,000, lr:(1.000e-04,)] [eta: 6:05:07, time (data): 1.150 (0.001)] l_g_pix: 9.6629e-02 l_g_percep: 1.7168e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7507e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3181e-05 
2021-12-02 19:01:42,466 INFO: Saving models and training states.
2021-12-02 19:03:39,923 INFO: [train..][epoch:  0, iter:   1,100, lr:(1.000e-04,)] [eta: 6:03:48, time (data): 1.155 (0.001)] l_g_pix: 1.0358e-01 l_g_percep: 1.5159e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4484e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3159e-05 
2021-12-02 19:05:37,108 INFO: [train..][epoch:  0, iter:   1,200, lr:(1.000e-04,)] [eta: 6:02:19, time (data): 1.164 (0.002)] l_g_pix: 8.7595e-02 l_g_percep: 1.4757e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9408e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4999e-05 
2021-12-02 19:07:34,847 INFO: [train..][epoch:  0, iter:   1,300, lr:(1.000e-04,)] [eta: 6:00:54, time (data): 1.177 (0.002)] l_g_pix: 1.1482e-01 l_g_percep: 1.5520e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9086e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7434e-05 
2021-12-02 19:09:34,653 INFO: [train..][epoch:  0, iter:   1,400, lr:(1.000e-04,)] [eta: 5:59:51, time (data): 1.188 (0.002)] l_g_pix: 1.1598e-01 l_g_percep: 1.8297e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 3.6481e-05 l_d_fake: 6.9317e-01 out_d_fake: 4.5590e-05 
2021-12-02 19:11:33,620 INFO: [train..][epoch:  0, iter:   1,500, lr:(1.000e-04,)] [eta: 5:58:30, time (data): 1.192 (0.001)] l_g_pix: 1.1070e-01 l_g_percep: 1.7283e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8683e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3837e-05 
2021-12-02 19:13:28,272 INFO: [train..][epoch:  0, iter:   1,600, lr:(1.000e-04,)] [eta: 5:56:15, time (data): 1.168 (0.001)] l_g_pix: 9.5200e-02 l_g_percep: 1.3516e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0083e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6387e-05 
2021-12-02 19:15:22,974 INFO: [train..][epoch:  0, iter:   1,700, lr:(1.000e-04,)] [eta: 5:54:03, time (data): 1.145 (0.001)] l_g_pix: 1.0829e-01 l_g_percep: 1.7658e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5327e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5876e-05 
2021-12-02 19:17:22,216 INFO: [train..][epoch:  1, iter:   1,800, lr:(1.000e-04,)] [eta: 5:52:39, time (data): 1.170 (0.019)] l_g_pix: 1.0748e-01 l_g_percep: 1.7286e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2651e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1377e-05 
2021-12-02 19:19:23,501 INFO: [train..][epoch:  1, iter:   1,900, lr:(1.000e-04,)] [eta: 5:51:30, time (data): 1.218 (0.002)] l_g_pix: 1.2085e-01 l_g_percep: 2.0468e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2792e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.3654e-05 
2021-12-02 19:21:19,644 INFO: [train..][epoch:  1, iter:   2,000, lr:(1.000e-04,)] [eta: 5:49:30, time (data): 1.188 (0.002)] l_g_pix: 8.6354e-02 l_g_percep: 1.4980e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7373e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4106e-05 
2021-12-02 19:21:19,648 INFO: Saving models and training states.
2021-12-02 19:23:18,233 INFO: [train..][epoch:  1, iter:   2,100, lr:(1.000e-04,)] [eta: 5:47:52, time (data): 1.159 (0.001)] l_g_pix: 1.2066e-01 l_g_percep: 1.9610e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8320e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5278e-05 
2021-12-02 19:25:12,796 INFO: [train..][epoch:  1, iter:   2,200, lr:(1.000e-04,)] [eta: 5:45:38, time (data): 1.152 (0.001)] l_g_pix: 1.2559e-01 l_g_percep: 1.7814e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5108e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6906e-05 
2021-12-02 19:27:10,033 INFO: [train..][epoch:  1, iter:   2,300, lr:(1.000e-04,)] [eta: 5:43:47, time (data): 1.176 (0.002)] l_g_pix: 7.4989e-02 l_g_percep: 1.3670e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.4522e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.9523e-05 
2021-12-02 19:29:05,550 INFO: [train..][epoch:  1, iter:   2,400, lr:(1.000e-04,)] [eta: 5:41:43, time (data): 1.165 (0.002)] l_g_pix: 1.0969e-01 l_g_percep: 1.6606e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7719e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6503e-05 
2021-12-02 19:31:00,356 INFO: [train..][epoch:  1, iter:   2,500, lr:(1.000e-04,)] [eta: 5:39:35, time (data): 1.148 (0.002)] l_g_pix: 1.0711e-01 l_g_percep: 1.5798e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9006e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5701e-05 
2021-12-02 19:32:56,640 INFO: [train..][epoch:  1, iter:   2,600, lr:(1.000e-04,)] [eta: 5:37:37, time (data): 1.156 (0.002)] l_g_pix: 7.7704e-02 l_g_percep: 1.4251e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.6087e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.1982e-05 
2021-12-02 19:34:50,996 INFO: [train..][epoch:  1, iter:   2,700, lr:(1.000e-04,)] [eta: 5:35:28, time (data): 1.144 (0.002)] l_g_pix: 6.9579e-02 l_g_percep: 1.1364e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7761e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4428e-05 
2021-12-02 19:36:46,335 INFO: [train..][epoch:  1, iter:   2,800, lr:(1.000e-04,)] [eta: 5:33:25, time (data): 1.149 (0.002)] l_g_pix: 1.0792e-01 l_g_percep: 1.5704e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2492e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4853e-05 
2021-12-02 19:38:41,326 INFO: [train..][epoch:  1, iter:   2,900, lr:(1.000e-04,)] [eta: 5:31:21, time (data): 1.152 (0.002)] l_g_pix: 1.0841e-01 l_g_percep: 1.5598e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9544e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7365e-05 
2021-12-02 19:40:36,070 INFO: [train..][epoch:  1, iter:   3,000, lr:(1.000e-04,)] [eta: 5:29:16, time (data): 1.149 (0.002)] l_g_pix: 1.1564e-01 l_g_percep: 1.8060e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3270e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4922e-05 
2021-12-02 19:40:36,074 INFO: Saving models and training states.
2021-12-02 19:42:38,263 INFO: [train..][epoch:  1, iter:   3,100, lr:(1.000e-04,)] [eta: 5:27:52, time (data): 1.218 (0.002)] l_g_pix: 9.1054e-02 l_g_percep: 1.5404e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9441e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5922e-05 
2021-12-02 19:44:35,964 INFO: [train..][epoch:  1, iter:   3,200, lr:(1.000e-04,)] [eta: 5:26:03, time (data): 1.196 (0.002)] l_g_pix: 9.2743e-02 l_g_percep: 1.5377e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9610e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0154e-05 
2021-12-02 19:46:32,697 INFO: [train..][epoch:  1, iter:   3,300, lr:(1.000e-04,)] [eta: 5:24:08, time (data): 1.167 (0.001)] l_g_pix: 7.3573e-02 l_g_percep: 1.3611e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2071e-05 l_d_fake: 6.9317e-01 out_d_fake: 4.6373e-05 
2021-12-02 19:48:30,828 INFO: [train..][epoch:  1, iter:   3,400, lr:(1.000e-04,)] [eta: 5:22:19, time (data): 1.175 (0.002)] l_g_pix: 1.0726e-01 l_g_percep: 1.4671e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8510e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7529e-05 
2021-12-02 19:50:32,502 INFO: [train..][epoch:  2, iter:   3,500, lr:(1.000e-04,)] [eta: 5:20:47, time (data): 1.230 (0.041)] l_g_pix: 7.2380e-02 l_g_percep: 1.4016e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.2379e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7058e-05 
2021-12-02 19:52:28,045 INFO: [train..][epoch:  2, iter:   3,600, lr:(1.000e-04,)] [eta: 5:18:45, time (data): 1.189 (0.019)] l_g_pix: 9.3098e-02 l_g_percep: 1.5103e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3609e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1442e-05 
2021-12-02 19:54:27,110 INFO: [train..][epoch:  2, iter:   3,700, lr:(1.000e-04,)] [eta: 5:17:00, time (data): 1.191 (0.002)] l_g_pix: 1.0449e-01 l_g_percep: 2.1020e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8131e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5260e-05 
2021-12-02 19:56:25,777 INFO: [train..][epoch:  2, iter:   3,800, lr:(1.000e-04,)] [eta: 5:15:11, time (data): 1.188 (0.002)] l_g_pix: 1.1367e-01 l_g_percep: 1.4600e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.3066e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0474e-05 
2021-12-02 19:58:20,117 INFO: [train..][epoch:  2, iter:   3,900, lr:(1.000e-04,)] [eta: 5:13:05, time (data): 1.143 (0.001)] l_g_pix: 9.8053e-02 l_g_percep: 1.5008e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.1831e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7772e-05 
2021-12-02 20:00:18,206 INFO: [train..][epoch:  2, iter:   4,000, lr:(1.000e-04,)] [eta: 5:11:14, time (data): 1.164 (0.002)] l_g_pix: 9.0566e-02 l_g_percep: 1.5385e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5670e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2873e-05 
2021-12-02 20:00:18,211 INFO: Saving models and training states.
2021-12-02 20:02:16,362 INFO: [train..][epoch:  2, iter:   4,100, lr:(1.000e-04,)] [eta: 5:09:22, time (data): 1.172 (0.002)] l_g_pix: 1.1111e-01 l_g_percep: 1.8166e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3599e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2207e-05 
2021-12-02 20:04:13,679 INFO: [train..][epoch:  2, iter:   4,200, lr:(1.000e-04,)] [eta: 5:07:28, time (data): 1.173 (0.002)] l_g_pix: 1.2278e-01 l_g_percep: 1.4967e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6454e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5049e-05 
2021-12-02 20:06:11,456 INFO: [train..][epoch:  2, iter:   4,300, lr:(1.000e-04,)] [eta: 5:05:35, time (data): 1.176 (0.001)] l_g_pix: 1.1364e-01 l_g_percep: 1.6174e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.4388e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3516e-05 
2021-12-02 20:08:06,716 INFO: [train..][epoch:  2, iter:   4,400, lr:(1.000e-04,)] [eta: 5:03:32, time (data): 1.163 (0.001)] l_g_pix: 9.9520e-02 l_g_percep: 1.5722e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3229e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1229e-05 
2021-12-02 20:10:02,214 INFO: [train..][epoch:  2, iter:   4,500, lr:(1.000e-04,)] [eta: 5:01:31, time (data): 1.155 (0.001)] l_g_pix: 1.2193e-01 l_g_percep: 1.3984e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6968e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0586e-05 
2021-12-02 20:11:59,871 INFO: [train..][epoch:  2, iter:   4,600, lr:(1.000e-04,)] [eta: 4:59:38, time (data): 1.167 (0.002)] l_g_pix: 1.0425e-01 l_g_percep: 1.4328e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3052e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1682e-05 
2021-12-02 20:13:59,746 INFO: [train..][epoch:  2, iter:   4,700, lr:(1.000e-04,)] [eta: 4:57:51, time (data): 1.209 (0.002)] l_g_pix: 8.6281e-02 l_g_percep: 1.4009e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.1424e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4500e-05 
2021-12-02 20:15:57,692 INFO: [train..][epoch:  2, iter:   4,800, lr:(1.000e-04,)] [eta: 4:55:58, time (data): 1.192 (0.002)] l_g_pix: 1.1089e-01 l_g_percep: 1.6822e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4837e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3527e-05 
2021-12-02 20:17:55,484 INFO: [train..][epoch:  2, iter:   4,900, lr:(1.000e-04,)] [eta: 4:54:04, time (data): 1.160 (0.001)] l_g_pix: 1.0799e-01 l_g_percep: 1.5915e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9311e-01 out_d_real: 7.0822e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5499e-05 
2021-12-02 20:19:52,566 INFO: [train..][epoch:  2, iter:   5,000, lr:(1.000e-04,)] [eta: 4:52:08, time (data): 1.166 (0.001)] l_g_pix: 8.5943e-02 l_g_percep: 1.4969e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0423e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6125e-05 
2021-12-02 20:19:52,571 INFO: Saving models and training states.
2021-12-02 20:21:48,798 INFO: [train..][epoch:  2, iter:   5,100, lr:(1.000e-04,)] [eta: 4:50:09, time (data): 1.149 (0.001)] l_g_pix: 1.0340e-01 l_g_percep: 1.6655e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4702e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4126e-05 
2021-12-02 20:23:48,247 INFO: [train..][epoch:  3, iter:   5,200, lr:(1.000e-04,)] [eta: 4:48:20, time (data): 1.175 (0.022)] l_g_pix: 8.6417e-02 l_g_percep: 1.3998e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9359e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5850e-05 
2021-12-02 20:25:44,763 INFO: [train..][epoch:  3, iter:   5,300, lr:(1.000e-04,)] [eta: 4:46:22, time (data): 1.173 (0.002)] l_g_pix: 9.7058e-02 l_g_percep: 1.6251e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5471e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4259e-05 
2021-12-02 20:27:41,052 INFO: [train..][epoch:  3, iter:   5,400, lr:(1.000e-04,)] [eta: 4:44:23, time (data): 1.167 (0.002)] l_g_pix: 1.1369e-01 l_g_percep: 1.5918e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7842e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5752e-05 
2021-12-02 20:29:37,171 INFO: [train..][epoch:  3, iter:   5,500, lr:(1.000e-04,)] [eta: 4:42:24, time (data): 1.159 (0.001)] l_g_pix: 9.4093e-02 l_g_percep: 1.7805e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0217e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5335e-05 
2021-12-02 20:31:35,751 INFO: [train..][epoch:  3, iter:   5,600, lr:(1.000e-04,)] [eta: 4:40:32, time (data): 1.174 (0.001)] l_g_pix: 1.0745e-01 l_g_percep: 1.6552e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7549e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5947e-05 
2021-12-02 20:33:32,559 INFO: [train..][epoch:  3, iter:   5,700, lr:(1.000e-04,)] [eta: 4:38:35, time (data): 1.163 (0.002)] l_g_pix: 1.1598e-01 l_g_percep: 1.6181e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7873e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5914e-05 
2021-12-02 20:35:27,603 INFO: [train..][epoch:  3, iter:   5,800, lr:(1.000e-04,)] [eta: 4:36:33, time (data): 1.156 (0.001)] l_g_pix: 1.1011e-01 l_g_percep: 1.7412e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.1490e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2018e-05 
2021-12-02 20:37:22,777 INFO: [train..][epoch:  3, iter:   5,900, lr:(1.000e-04,)] [eta: 4:34:32, time (data): 1.148 (0.002)] l_g_pix: 1.0132e-01 l_g_percep: 1.7504e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7608e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7493e-05 
2021-12-02 20:39:18,598 INFO: [train..][epoch:  3, iter:   6,000, lr:(1.000e-04,)] [eta: 4:32:33, time (data): 1.154 (0.002)] l_g_pix: 8.6374e-02 l_g_percep: 1.4199e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7746e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1540e-05 
2021-12-02 20:39:18,603 INFO: Saving models and training states.
2021-12-02 20:41:16,587 INFO: [train..][epoch:  3, iter:   6,100, lr:(1.000e-04,)] [eta: 4:30:39, time (data): 1.171 (0.002)] l_g_pix: 1.2032e-01 l_g_percep: 1.9067e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2252e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1964e-05 
2021-12-02 20:43:12,833 INFO: [train..][epoch:  3, iter:   6,200, lr:(1.000e-04,)] [eta: 4:28:41, time (data): 1.166 (0.002)] l_g_pix: 1.0017e-01 l_g_percep: 1.5558e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7247e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3983e-05 
2021-12-02 20:45:08,257 INFO: [train..][epoch:  3, iter:   6,300, lr:(1.000e-04,)] [eta: 4:26:41, time (data): 1.147 (0.001)] l_g_pix: 7.8261e-02 l_g_percep: 1.3885e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.5999e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.8433e-05 
2021-12-02 20:47:03,262 INFO: [train..][epoch:  3, iter:   6,400, lr:(1.000e-04,)] [eta: 4:24:40, time (data): 1.149 (0.002)] l_g_pix: 1.0621e-01 l_g_percep: 1.7974e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4726e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3932e-05 
2021-12-02 20:48:58,013 INFO: [train..][epoch:  3, iter:   6,500, lr:(1.000e-04,)] [eta: 4:22:39, time (data): 1.151 (0.001)] l_g_pix: 8.5403e-02 l_g_percep: 1.4157e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.2475e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6848e-05 
2021-12-02 20:50:59,310 INFO: [train..][epoch:  3, iter:   6,600, lr:(1.000e-04,)] [eta: 4:20:52, time (data): 1.188 (0.002)] l_g_pix: 1.1980e-01 l_g_percep: 1.7238e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9270e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5713e-05 
2021-12-02 20:52:57,311 INFO: [train..][epoch:  3, iter:   6,700, lr:(1.000e-04,)] [eta: 4:18:57, time (data): 1.172 (0.001)] l_g_pix: 1.1797e-01 l_g_percep: 1.9641e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.3858e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0059e-05 
2021-12-02 20:54:54,363 INFO: [train..][epoch:  3, iter:   6,800, lr:(1.000e-04,)] [eta: 4:17:01, time (data): 1.171 (0.002)] l_g_pix: 1.0670e-01 l_g_percep: 1.5722e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4925e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5348e-05 
2021-12-02 20:56:53,428 INFO: [train..][epoch:  3, iter:   6,900, lr:(1.000e-04,)] [eta: 4:15:08, time (data): 1.200 (0.002)] l_g_pix: 1.0805e-01 l_g_percep: 1.6402e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.2266e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.8123e-05 
2021-12-02 20:58:54,567 INFO: [train..][epoch:  4, iter:   7,000, lr:(1.000e-04,)] [eta: 4:13:19, time (data): 1.207 (0.024)] l_g_pix: 9.7946e-02 l_g_percep: 1.6508e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 3.7882e-05 l_d_fake: 6.9317e-01 out_d_fake: 4.8301e-05 
2021-12-02 20:58:54,573 INFO: Saving models and training states.
2021-12-02 21:00:52,330 INFO: [train..][epoch:  4, iter:   7,100, lr:(1.000e-04,)] [eta: 4:11:24, time (data): 1.168 (0.002)] l_g_pix: 9.2086e-02 l_g_percep: 1.4383e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6173e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2611e-05 
2021-12-02 21:02:49,381 INFO: [train..][epoch:  4, iter:   7,200, lr:(1.000e-04,)] [eta: 4:09:27, time (data): 1.170 (0.002)] l_g_pix: 9.5113e-02 l_g_percep: 1.7528e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9402e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5294e-05 
2021-12-02 21:04:44,095 INFO: [train..][epoch:  4, iter:   7,300, lr:(1.000e-04,)] [eta: 4:07:26, time (data): 1.148 (0.001)] l_g_pix: 1.4071e-01 l_g_percep: 1.7934e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4628e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6103e-05 
2021-12-02 21:06:38,976 INFO: [train..][epoch:  4, iter:   7,400, lr:(1.000e-04,)] [eta: 4:05:26, time (data): 1.148 (0.002)] l_g_pix: 9.6828e-02 l_g_percep: 1.7656e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8104e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4997e-05 
2021-12-02 21:08:34,180 INFO: [train..][epoch:  4, iter:   7,500, lr:(1.000e-04,)] [eta: 4:03:26, time (data): 1.156 (0.001)] l_g_pix: 8.2821e-02 l_g_percep: 1.4571e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8891e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3177e-05 
2021-12-02 21:10:29,101 INFO: [train..][epoch:  4, iter:   7,600, lr:(1.000e-04,)] [eta: 4:01:26, time (data): 1.152 (0.001)] l_g_pix: 9.0152e-02 l_g_percep: 1.5821e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.3569e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.9483e-05 
2021-12-02 21:12:26,177 INFO: [train..][epoch:  4, iter:   7,700, lr:(1.000e-04,)] [eta: 3:59:30, time (data): 1.177 (0.001)] l_g_pix: 8.3727e-02 l_g_percep: 1.5168e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8690e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3357e-05 
2021-12-02 21:14:26,209 INFO: [train..][epoch:  4, iter:   7,800, lr:(1.000e-04,)] [eta: 3:57:38, time (data): 1.192 (0.002)] l_g_pix: 9.2282e-02 l_g_percep: 1.5095e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6825e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3491e-05 
2021-12-02 21:16:25,882 INFO: [train..][epoch:  4, iter:   7,900, lr:(1.000e-04,)] [eta: 3:55:45, time (data): 1.179 (0.002)] l_g_pix: 1.3137e-01 l_g_percep: 1.6306e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.1160e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4126e-05 
2021-12-02 21:18:21,562 INFO: [train..][epoch:  4, iter:   8,000, lr:(1.000e-04,)] [eta: 3:53:47, time (data): 1.165 (0.002)] l_g_pix: 1.2324e-01 l_g_percep: 1.5304e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.3640e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0626e-05 
2021-12-02 21:18:21,566 INFO: Saving models and training states.
2021-12-02 21:20:18,537 INFO: [train..][epoch:  4, iter:   8,100, lr:(1.000e-04,)] [eta: 3:51:50, time (data): 1.146 (0.002)] l_g_pix: 1.0217e-01 l_g_percep: 1.5060e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7904e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6483e-05 
2021-12-02 21:22:13,515 INFO: [train..][epoch:  4, iter:   8,200, lr:(1.000e-04,)] [eta: 3:49:50, time (data): 1.148 (0.002)] l_g_pix: 8.4468e-02 l_g_percep: 1.3942e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9310e-01 out_d_real: 9.1075e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.8664e-05 
2021-12-02 21:24:08,621 INFO: [train..][epoch:  4, iter:   8,300, lr:(1.000e-04,)] [eta: 3:47:51, time (data): 1.153 (0.002)] l_g_pix: 1.1039e-01 l_g_percep: 1.6966e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6517e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5405e-05 
2021-12-02 21:26:06,296 INFO: [train..][epoch:  4, iter:   8,400, lr:(1.000e-04,)] [eta: 3:45:55, time (data): 1.168 (0.002)] l_g_pix: 1.1350e-01 l_g_percep: 1.7998e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9155e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5922e-05 
2021-12-02 21:28:03,694 INFO: [train..][epoch:  4, iter:   8,500, lr:(1.000e-04,)] [eta: 3:43:59, time (data): 1.148 (0.001)] l_g_pix: 1.0686e-01 l_g_percep: 1.7291e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6114e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3082e-05 
2021-12-02 21:30:01,247 INFO: [train..][epoch:  4, iter:   8,600, lr:(1.000e-04,)] [eta: 3:42:03, time (data): 1.165 (0.002)] l_g_pix: 1.2260e-01 l_g_percep: 1.7458e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6261e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4360e-05 
2021-12-02 21:32:07,080 INFO: [train..][epoch:  5, iter:   8,700, lr:(1.000e-04,)] [eta: 3:40:18, time (data): 1.144 (0.002)] l_g_pix: 1.0247e-01 l_g_percep: 1.5660e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3593e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2838e-05 
2021-12-02 21:34:01,760 INFO: [train..][epoch:  5, iter:   8,800, lr:(1.000e-04,)] [eta: 3:38:18, time (data): 1.146 (0.002)] l_g_pix: 1.2688e-01 l_g_percep: 1.7712e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2846e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2403e-05 
2021-12-02 21:35:58,071 INFO: [train..][epoch:  5, iter:   8,900, lr:(1.000e-04,)] [eta: 3:36:20, time (data): 1.173 (0.002)] l_g_pix: 1.1058e-01 l_g_percep: 1.5003e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.5407e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.3306e-05 
2021-12-02 21:38:01,318 INFO: [train..][epoch:  5, iter:   9,000, lr:(1.000e-04,)] [eta: 3:34:31, time (data): 1.211 (0.002)] l_g_pix: 1.0782e-01 l_g_percep: 1.5448e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0114e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.9679e-05 
2021-12-02 21:38:01,320 INFO: Saving models and training states.
2021-12-02 21:40:04,136 INFO: [train..][epoch:  5, iter:   9,100, lr:(1.000e-04,)] [eta: 3:32:41, time (data): 1.205 (0.002)] l_g_pix: 9.1176e-02 l_g_percep: 1.6989e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6918e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3607e-05 
2021-12-02 21:42:01,574 INFO: [train..][epoch:  5, iter:   9,200, lr:(1.000e-04,)] [eta: 3:30:44, time (data): 1.185 (0.002)] l_g_pix: 1.0906e-01 l_g_percep: 1.7604e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4986e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5353e-05 
2021-12-02 21:43:57,439 INFO: [train..][epoch:  5, iter:   9,300, lr:(1.000e-04,)] [eta: 3:28:45, time (data): 1.168 (0.001)] l_g_pix: 9.7595e-02 l_g_percep: 1.6410e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7153e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4439e-05 
2021-12-02 21:46:11,581 INFO: [train..][epoch:  5, iter:   9,400, lr:(1.000e-04,)] [eta: 3:27:08, time (data): 1.280 (0.002)] l_g_pix: 1.1587e-01 l_g_percep: 1.8017e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7931e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4730e-05 
2021-12-02 21:48:13,220 INFO: [train..][epoch:  5, iter:   9,500, lr:(1.000e-04,)] [eta: 3:25:15, time (data): 1.211 (0.002)] l_g_pix: 1.1656e-01 l_g_percep: 1.5838e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7618e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4838e-05 
2021-12-02 21:50:14,602 INFO: [train..][epoch:  5, iter:   9,600, lr:(1.000e-04,)] [eta: 3:23:22, time (data): 1.213 (0.002)] l_g_pix: 9.9916e-02 l_g_percep: 1.7216e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.4313e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1476e-05 
2021-12-02 21:52:11,014 INFO: [train..][epoch:  5, iter:   9,700, lr:(1.000e-04,)] [eta: 3:21:24, time (data): 1.146 (0.001)] l_g_pix: 1.1981e-01 l_g_percep: 1.9036e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7145e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4327e-05 
2021-12-02 21:54:06,922 INFO: [train..][epoch:  5, iter:   9,800, lr:(1.000e-04,)] [eta: 3:19:25, time (data): 1.154 (0.001)] l_g_pix: 1.1195e-01 l_g_percep: 1.8757e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.4023e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2260e-05 
2021-12-02 21:56:01,926 INFO: [train..][epoch:  5, iter:   9,900, lr:(1.000e-04,)] [eta: 3:17:25, time (data): 1.149 (0.001)] l_g_pix: 1.1056e-01 l_g_percep: 2.0182e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7101e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6789e-05 
2021-12-02 21:57:56,789 INFO: [train..][epoch:  5, iter:  10,000, lr:(1.000e-04,)] [eta: 3:15:26, time (data): 1.149 (0.001)] l_g_pix: 9.9677e-02 l_g_percep: 1.7154e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5524e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1529e-05 
2021-12-02 21:57:56,794 INFO: Saving models and training states.
2021-12-02 21:59:57,216 INFO: [train..][epoch:  5, iter:  10,100, lr:(1.000e-04,)] [eta: 3:13:32, time (data): 1.189 (0.002)] l_g_pix: 1.0040e-01 l_g_percep: 1.5533e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.4765e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3617e-05 
2021-12-02 22:01:53,900 INFO: [train..][epoch:  5, iter:  10,200, lr:(1.000e-04,)] [eta: 3:11:34, time (data): 1.174 (0.002)] l_g_pix: 1.2351e-01 l_g_percep: 1.9895e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7113e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.8668e-05 
2021-12-02 22:03:52,952 INFO: [train..][epoch:  5, iter:  10,300, lr:(1.000e-04,)] [eta: 3:09:38, time (data): 1.195 (0.002)] l_g_pix: 1.2721e-01 l_g_percep: 1.6791e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5091e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6161e-05 
2021-12-02 22:05:56,964 INFO: [train..][epoch:  6, iter:  10,400, lr:(1.000e-04,)] [eta: 3:07:47, time (data): 1.225 (0.033)] l_g_pix: 1.0370e-01 l_g_percep: 1.4031e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9311e-01 out_d_real: 7.9360e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4852e-05 
2021-12-02 22:07:51,836 INFO: [train..][epoch:  6, iter:  10,500, lr:(1.000e-04,)] [eta: 3:05:47, time (data): 1.150 (0.001)] l_g_pix: 1.0958e-01 l_g_percep: 1.5158e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.5163e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.8502e-05 
2021-12-02 22:09:46,227 INFO: [train..][epoch:  6, iter:  10,600, lr:(1.000e-04,)] [eta: 3:03:47, time (data): 1.146 (0.001)] l_g_pix: 1.3990e-01 l_g_percep: 2.0332e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7600e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0582e-05 
2021-12-02 22:11:40,998 INFO: [train..][epoch:  6, iter:  10,700, lr:(1.000e-04,)] [eta: 3:01:48, time (data): 1.150 (0.002)] l_g_pix: 9.6243e-02 l_g_percep: 1.8995e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9283e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6164e-05 
2021-12-02 22:13:37,495 INFO: [train..][epoch:  6, iter:  10,800, lr:(1.000e-04,)] [eta: 2:59:50, time (data): 1.160 (0.002)] l_g_pix: 1.0427e-01 l_g_percep: 1.6436e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.1566e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7701e-05 
2021-12-02 22:15:35,056 INFO: [train..][epoch:  6, iter:  10,900, lr:(1.000e-04,)] [eta: 2:57:53, time (data): 1.173 (0.002)] l_g_pix: 9.6676e-02 l_g_percep: 1.4010e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8929e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4898e-05 
2021-12-02 22:17:31,489 INFO: [train..][epoch:  6, iter:  11,000, lr:(1.000e-04,)] [eta: 2:55:55, time (data): 1.167 (0.002)] l_g_pix: 1.2879e-01 l_g_percep: 2.2551e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.4115e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4937e-05 
2021-12-02 22:17:31,496 INFO: Saving models and training states.
2021-12-02 22:19:31,099 INFO: [train..][epoch:  6, iter:  11,100, lr:(1.000e-04,)] [eta: 2:53:59, time (data): 1.167 (0.002)] l_g_pix: 1.0674e-01 l_g_percep: 1.4749e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7938e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6340e-05 
2021-12-02 22:21:27,570 INFO: [train..][epoch:  6, iter:  11,200, lr:(1.000e-04,)] [eta: 2:52:01, time (data): 1.165 (0.002)] l_g_pix: 6.6004e-02 l_g_percep: 1.1688e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0499e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5098e-05 
2021-12-02 22:23:23,771 INFO: [train..][epoch:  6, iter:  11,300, lr:(1.000e-04,)] [eta: 2:50:03, time (data): 1.170 (0.002)] l_g_pix: 1.2126e-01 l_g_percep: 1.9478e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6759e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5301e-05 
2021-12-02 22:25:20,221 INFO: [train..][epoch:  6, iter:  11,400, lr:(1.000e-04,)] [eta: 2:48:05, time (data): 1.166 (0.002)] l_g_pix: 1.1474e-01 l_g_percep: 1.8409e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7046e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7245e-05 
2021-12-02 22:27:17,907 INFO: [train..][epoch:  6, iter:  11,500, lr:(1.000e-04,)] [eta: 2:46:08, time (data): 1.179 (0.002)] l_g_pix: 8.9774e-02 l_g_percep: 1.4321e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.4292e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.0137e-05 
2021-12-02 22:29:15,101 INFO: [train..][epoch:  6, iter:  11,600, lr:(1.000e-04,)] [eta: 2:44:11, time (data): 1.174 (0.002)] l_g_pix: 1.0535e-01 l_g_percep: 1.6608e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9823e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.0232e-05 
2021-12-02 22:31:10,778 INFO: [train..][epoch:  6, iter:  11,700, lr:(1.000e-04,)] [eta: 2:42:12, time (data): 1.159 (0.001)] l_g_pix: 1.1842e-01 l_g_percep: 1.4142e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9410e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.9087e-05 
2021-12-02 22:33:07,029 INFO: [train..][epoch:  6, iter:  11,800, lr:(1.000e-04,)] [eta: 2:40:14, time (data): 1.161 (0.001)] l_g_pix: 8.0122e-02 l_g_percep: 1.3031e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.4129e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.9844e-05 
2021-12-02 22:35:02,906 INFO: [train..][epoch:  6, iter:  11,900, lr:(1.000e-04,)] [eta: 2:38:16, time (data): 1.155 (0.001)] l_g_pix: 1.0503e-01 l_g_percep: 1.7694e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.6890e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4411e-05 
2021-12-02 22:37:00,265 INFO: [train..][epoch:  6, iter:  12,000, lr:(1.000e-04,)] [eta: 2:36:19, time (data): 1.168 (0.002)] l_g_pix: 1.0511e-01 l_g_percep: 1.7178e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7998e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6319e-05 
2021-12-02 22:37:00,270 INFO: Saving models and training states.
2021-12-02 22:39:03,286 INFO: [train..][epoch:  7, iter:  12,100, lr:(1.000e-04,)] [eta: 2:34:25, time (data): 1.282 (0.086)] l_g_pix: 1.0200e-01 l_g_percep: 1.7319e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.0544e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6527e-05 
2021-12-02 22:41:00,575 INFO: [train..][epoch:  7, iter:  12,200, lr:(1.000e-04,)] [eta: 2:32:28, time (data): 1.204 (0.026)] l_g_pix: 1.0494e-01 l_g_percep: 1.8003e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8343e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5854e-05 
2021-12-02 22:42:57,940 INFO: [train..][epoch:  7, iter:  12,300, lr:(1.000e-04,)] [eta: 2:30:31, time (data): 1.187 (0.002)] l_g_pix: 9.7691e-02 l_g_percep: 1.4881e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.1822e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.1867e-05 
2021-12-02 22:44:54,588 INFO: [train..][epoch:  7, iter:  12,400, lr:(1.000e-04,)] [eta: 2:28:33, time (data): 1.172 (0.002)] l_g_pix: 1.1147e-01 l_g_percep: 1.5972e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.8899e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.5868e-05 
2021-12-02 22:46:51,065 INFO: [train..][epoch:  7, iter:  12,500, lr:(1.000e-04,)] [eta: 2:26:35, time (data): 1.160 (0.001)] l_g_pix: 9.6384e-02 l_g_percep: 1.6589e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.3965e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.9265e-05 
2021-12-02 22:48:47,369 INFO: [train..][epoch:  7, iter:  12,600, lr:(1.000e-04,)] [eta: 2:24:37, time (data): 1.162 (0.001)] l_g_pix: 1.0359e-01 l_g_percep: 1.5415e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3463e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3234e-05 
2021-12-02 22:50:43,584 INFO: [train..][epoch:  7, iter:  12,700, lr:(1.000e-04,)] [eta: 2:22:40, time (data): 1.163 (0.001)] l_g_pix: 8.8720e-02 l_g_percep: 1.5254e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.7181e-05 l_d_fake: 6.9318e-01 out_d_fake: 6.2509e-05 
2021-12-02 22:52:41,570 INFO: [train..][epoch:  7, iter:  12,800, lr:(1.000e-04,)] [eta: 2:20:43, time (data): 1.175 (0.002)] l_g_pix: 1.2242e-01 l_g_percep: 1.8524e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 3.8848e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.0470e-05 
2021-12-02 22:54:37,816 INFO: [train..][epoch:  7, iter:  12,900, lr:(1.000e-04,)] [eta: 2:18:45, time (data): 1.152 (0.002)] l_g_pix: 1.1282e-01 l_g_percep: 1.5069e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.2654e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3823e-05 
2021-12-02 22:56:34,288 INFO: [train..][epoch:  7, iter:  13,000, lr:(1.000e-04,)] [eta: 2:16:47, time (data): 1.161 (0.002)] l_g_pix: 1.0669e-01 l_g_percep: 1.5431e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5708e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.7601e-05 
2021-12-02 22:56:34,293 INFO: Saving models and training states.
2021-12-02 22:58:32,162 INFO: [train..][epoch:  7, iter:  13,100, lr:(1.000e-04,)] [eta: 2:14:50, time (data): 1.152 (0.001)] l_g_pix: 1.0264e-01 l_g_percep: 1.5799e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.6960e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6132e-05 
2021-12-02 23:00:28,065 INFO: [train..][epoch:  7, iter:  13,200, lr:(1.000e-04,)] [eta: 2:12:52, time (data): 1.157 (0.001)] l_g_pix: 7.6947e-02 l_g_percep: 1.4713e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.9218e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5239e-05 
2021-12-02 23:02:24,381 INFO: [train..][epoch:  7, iter:  13,300, lr:(1.000e-04,)] [eta: 2:10:54, time (data): 1.152 (0.001)] l_g_pix: 1.0577e-01 l_g_percep: 1.7313e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7945e-05 l_d_fake: 6.9318e-01 out_d_fake: 5.6524e-05 
2021-12-02 23:04:20,712 INFO: [train..][epoch:  7, iter:  13,400, lr:(1.000e-04,)] [eta: 2:08:57, time (data): 1.160 (0.001)] l_g_pix: 1.0581e-01 l_g_percep: 1.9041e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.3989e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.3626e-05 
2021-12-02 23:06:17,782 INFO: [train..][epoch:  7, iter:  13,500, lr:(1.000e-04,)] [eta: 2:06:59, time (data): 1.178 (0.002)] l_g_pix: 1.4321e-01 l_g_percep: 2.0653e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 3.2827e-05 l_d_fake: 6.9317e-01 out_d_fake: 4.9030e-05 
2021-12-02 23:08:14,013 INFO: [train..][epoch:  7, iter:  13,600, lr:(1.000e-04,)] [eta: 2:05:02, time (data): 1.166 (0.002)] l_g_pix: 8.9179e-02 l_g_percep: 1.5215e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.0248e-05 l_d_fake: 6.9317e-01 out_d_fake: 4.8717e-05 
2021-12-02 23:10:10,126 INFO: [train..][epoch:  7, iter:  13,700, lr:(1.000e-04,)] [eta: 2:03:04, time (data): 1.163 (0.002)] l_g_pix: 1.0738e-01 l_g_percep: 1.6175e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.5603e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.2673e-05 
2021-12-02 23:12:06,172 INFO: [train..][epoch:  7, iter:  13,800, lr:(1.000e-04,)] [eta: 2:01:06, time (data): 1.161 (0.002)] l_g_pix: 1.1628e-01 l_g_percep: 1.7392e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9313e-01 out_d_real: 4.0074e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.4346e-05 
2021-12-02 23:14:06,840 INFO: [train..][epoch:  8, iter:  13,900, lr:(1.000e-04,)] [eta: 1:59:10, time (data): 1.159 (0.001)] l_g_pix: 1.0343e-01 l_g_percep: 1.3756e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 5.8395e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5264e-05 
2021-12-02 23:16:02,106 INFO: [train..][epoch:  8, iter:  14,000, lr:(1.000e-04,)] [eta: 1:57:12, time (data): 1.154 (0.001)] l_g_pix: 1.1492e-01 l_g_percep: 1.6474e+01 l_g_gan: 6.9312e-02 l_d_real: 6.9312e-01 out_d_real: 4.7426e-05 l_d_fake: 6.9317e-01 out_d_fake: 5.5567e-05 
2021-12-02 23:16:02,110 INFO: Saving models and training states.
